% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/insert-ui.R
\name{insertTab}
\alias{insertTab}
\title{Dynamically add a tabPanel}
\usage{
insertTab(tabsetPanelId, tab, target = NULL, position = c("right", "left"),
  immediate = FALSE, session = getDefaultReactiveDomain())
}
\arguments{
\item{tabsetPanelId}{The \code{id} of the \code{tabsetPanel()} into which
\code{tab} will be inserted.}

\item{tab}{The tab element to be added (must be created with
\code{tabPanel}).}

\item{target}{The \code{value} of an existing \code{tabPanel()}, next to
which \code{tab} will be added. If \code{NULL},the \code{tab} will be
placed either as the first tab or the last tab, depending on the
\code{position} argument.}

\item{position}{Should \code{tab} be added to the right ot to the left
of \code{target}?}

\item{immediate}{Whether \code{tab} should be immediately inserted into
the app when you call \code{insertTab}, or whether Shiny should wait until
all outputs have been updated and all observers have been run (default).}

\item{session}{The shiny session within which to call \code{insertTab}.}
}
\description{
Dynamically add a \code{tabPanel()} into an existing \code{tabsetPanel}.
}
\examples{
## Only run this example in interactive R sessions
if (interactive()) {
ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(actionButton("add", "Add tab")),
    mainPanel(
      tabsetPanel(id = "tabs",
        tabPanel("Hello", "This is the hello tab"),
        tabPanel("Foo", "This is the foo tab"),
        tabPanel("Bar", "This is the bar tab")
      )
    )
  )
)
server <- function(input, output, session) {
  observeEvent(input$add, {
    insertTab(tabsetPanelId = "tabs",
      tabPanel("Dynamic", "This a dynamically-added tab"),
      target = "Bar"
    )
  })
}

shinyApp(ui, server)
}
}
\seealso{
\code{\link{removeTab}}, \code{\link{showTab}},
  \code{\link{hideTab}}
}
